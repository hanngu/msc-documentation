1. Evaporation is now percent based. 10% of the edge's pheromone is removed during evaporation.
2. When the best edges are given more pheromones, this is also percent based. An edge in a good ant's route set is given 10% more pheromones. 

3. 13.03.15 we are struggling with the fact that few ants generates complete routes (route sets that contains every node), and I (Hanne) believe that we will get better results with more ants that generates complete routes. Less than 10% of the ants in the swarm generates complete route sets (testing done in java). To do this I want to make the ants favor nodes that are not yet in the route set. Todays solution makes the ants chose the next node based on three equal factors, namely amount of pheromone on the connecting edge, the demand between the two nodes in question and whether or not the node exists in the ant's route set. I will try a solution where the ant MUST chose one of the unexplored nodes, if there exists one.

Results: The number of ants with complete route sets increased from less than 10 % to 80 %! This is probably a path we want to follow. 

4. The results described above chooses an unexplored node at random. I will now try a solution where the unexplored node that is chosen is determined by the amount of pheromones and demand. 

Okey. There are some issues. Some paths seems to null in neo4jhandler, even though they shouldn't be. This seems to only be a problem when we favor unexplored nodes. This needs to be investigated more. 

The issues described above are solved.

1. Refactoring of code: 
	- NodeCouples are calculated WAY to many times. This should only be done once (SOLVED). 

Known issues:
- When creating a new route, the start node is chosen at random (SOLVED 20.03)

"Every route should contain at least 3 nodes"
This is now (20.03) practically solved, by not allowing a start node of a new route to be a node that connects to a node with only one edge. Ref. Mandl-network node 2 and 15. This will result in that each route has at least three nodes, because it will not get stuck on node number 2. This added feature did not seem to increase the run time. (SOLVED)


25.03: We are now only concerned about the demand between connecting nodes. Maybe we could credit ants that satisfy not connecting nodes with high demand directly? (SOLVED)

__________________________________________________________________
Paper om inertia weight strategier i PSO: http://www.softcomputing.net/nabic11_7.pdf
__________________________________________________________________






Dijkstra is guaranteed to be correct (ref. Algdatbok s.659-661) if the algorithm is ran on a weigthed, directed graph G = (V,E) with non-negative weight function w and source s. 

A* is complete and optimal, provided that H(n) is admissible (it never over estimates the cost to reach the goal) or consistent (the estimated cost of reaching the goal from node n is no greater than the step cost of getting to the successor n' + estimated cost of reaching the goal of n'). (ai-boka side 109, 94-9
-------------------------------------------------------------------------------------------------
TEST RESULTS
-------------------------------------------------------------------------------------------------
CA 0%
I = 125
S = 50
FA = 0.1
Pv = 0.01
Pb = 0.1
E = 0.1
BR = 0.1

Average att: 11.3
Min att: 10.8
Max att: 11.9
Average totfit: -270.3177263969172
Min totfit: -275.32883750802824
Max totfit: -262.49197174052665
Teoretisk best mulige totfit: -300.0
__________________________________________________________________________________________________


